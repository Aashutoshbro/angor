@page "/view/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Services
@using Angor.Shared.Services
@using System.Text.Json
@using Nostr.Client.Messages

@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject INetworkConfiguration _NetworkConfiguration
@inject IClipboardService _clipboardService
@inject IIndexerService _IndexerService
@inject IRelayService _RelayService

@inherits BaseComponent

<div class="container mt-4">
    <h1>View Project</h1>

    <NotificationComponent @ref="notificationComponent" />

    @if (project == null)
    {
        @if (findInProgress)
        {
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <p><em>project not found...</em></p>    
        }
    }
    else
    {
        <!-- Project Details Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>@project.ProjectIdentifier</h4>
            </div>
            <div class="card-body">

                @if (projectMetadata != null || SessionStorage.IsProjectMetadataStorageByPubkey(project.NostrPubKey))
                {
                    var metadata = projectMetadata ?? SessionStorage.GetProjectMetadataByPubkey(project.NostrPubKey);

                    if (metadata?.Banner != null)
                    {
                        <div class="card-header overflow-hidden">
                            <img class="card-img-top" src="@metadata.Banner" alt=""/>
                        </div>
                    }

                    <br/>
                    <h3 class="card-title">@metadata?.Name</h3>
                    <p class="card-subtitle">@metadata?.About</p>
                    <hr />
                }

                <a href="@projectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                <p class="card-text">Project Identifier: @project.ProjectIdentifier</p>
                <p class="card-text">Founder Key: @project.FounderKey</p>
                <p class="card-text">Target Amount: @project.TargetAmount @network.CoinTicker</p>
                <p class="card-text">Penalty duration: @project.PenaltyDays days</p>

                <p class="card-text">
                    Project dates: @project.StartDate.ToString("dd/MM/yyyy") - @project.ExpiryDate.ToString("dd/MM/yyyy")
                </p>

                @{
                    int startsInDays = (project.StartDate - DateTime.Now).Days;

                    if (startsInDays > 0)
                    {
                        <p class="card-text">Starts in @startsInDays days</p>
                    }
                    else
                    {
                        int totalDays = (project.ExpiryDate - project.StartDate).Days;
                        int currentDays = (DateTime.Now - project.StartDate).Days;
                        currentDays = currentDays < 0 ? 0 : currentDays;
                        currentDays = currentDays > totalDays ? totalDays : currentDays;

                        var completePercent = (currentDays * 100) / totalDays;

                        <div class="progress mb-2">
                            <div class="progress-bar bg-secondary" role="progressbar" style="width: @completePercent%;" aria-valuenow="@completePercent" aria-valuemin="0" aria-valuemax="100">@currentDays/@totalDays days</div>
                        </div>
                    }

                 }
            </div>
        </div>

        <!-- Stats Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stats</h4>
            </div>
            <div class="card-body">
                <!-- Progress bar section -->
                <div class="progress mb-2">
                    <div class="progress-bar" role="progressbar" style="width: @projectStats.FundingProgressPercent%;" aria-valuenow="@projectStats.FundingProgressPercent" aria-valuemin="0" aria-valuemax="100"></div>
                </div>

                <!-- Additional details section -->
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <p class="card-text mb-0">Total Raised: @projectStats.TotalRaised @network.CoinTicker</p>
                        <p class="card-text mb-0">Total Investors: @projectStats.TotalInvestors</p>
                        <p class="card-text mb-0">Total Seeders: @projectStats.TotalSeeders</p>
                        <p class="card-text mb-0">Time Left for Investing: @projectStats.TimeLeft days</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stages Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stages</h4>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Stage </th>
                        <th>Stage %</th>
                        <th>Release Date</th>
                        <!-- Other headers -->
                    </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < project.Stages.Count; index++)
                        {
                            <tr>
                                <td>@(index + 1)</td>
                                <td>@project.Stages[index].AmountToRelease %</td>
                                <td>@project.Stages[index].ReleaseDate.ToString("dd/MM/yyyy")</td>
                                <!-- Other stage details -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Seeders Section -->
@*        <div class="card mb-3">
            <div class="card-header">
                <h4>Selected Seeders</h4>
            </div>
            <div class="card-body">
                @if (SelectedSeeders.Any())
                {
                    <!-- Seeders table -->
                }
                else
                {
                    <p><i class="bi bi-exclamation-triangle-fill"></i> No seeders yet.</p>
                }
            </div>
        </div>*@

        <!-- Actions Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Actions</h4>
            </div>
            <div class="card-body">
                @if (founder)
                {
                    <p>You are the founder.</p>

                    <div class="mb-3">
                        <!-- Buttons Spend Funds and Approve Signature next to each other -->
                        <NavLink href=@($"/spend/{project.ProjectIdentifier}") class="btn btn-primary me-2">Spend Funds</NavLink>
                        <NavLink href=@($"/signatures/{project.ProjectIdentifier}") class="btn btn-primary">Approve signature</NavLink>
                    </div>

                    @if (project.NostrPubKey != null)
                    {
                        <div class="mb-3">
                            <label for="NostrPublicKey" class="form-label">Project NOSTR public key (hex)</label>
                            <div class="input-group">
                                <InputText id="NostrPublicKey" @bind-Value="project.NostrPubKey" class="form-control" placeholder="@project.NostrPubKey" readonly/>
                                <button @onclick="CopyWordsToClipboardAsync" class="btn btn-success">Copy NSec to clipboard</button>
                            </div>
                        </div>
                    }

                }
                else if (invested)
                {
                    <p>You have already invested in this project.

                        <a href="@myProjectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                    </p>

                    <button class="btn btn-danger" @onclick="RecoverFunds">Recover</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="InvestInProject">Invest</button>
                }
            </div>
        </div>
      

        <!-- Relays Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Relays</h4>
            </div>
            <div class="card-body">
                @foreach (var relay in NostrClients)
                {
                    <a href="@relay" target="_blank" class="d-block mb-2">
                        <i class="bi bi-globe"></i> @relay
                    </a>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private ProjectInfo? project;
    private ProjectMetadata? projectMetadata;

    private bool sendConfirmModal;

    string myProjectExplorerLink;
    string projectExplorerLink;

    private List<(string Hash, int Amount)> SelectedSeeders = new List<(string hash, int amount)>
    {
        { (new uint256().ToString(), 10) },
        { (new uint256().ToString(), 20) },
    };

    public class ProjectStats
    {
        public int TotalRaised { get; set; }
        public int TotalInvestors { get; set; }
        public int TotalSeeders { get; set; }
        public int TimeLeft { get; set; }
        public int FundingProgressPercent { get; set; }
        
    };

    ProjectStats projectStats = new ProjectStats
    {
        TimeLeft = 7,
        TotalInvestors = 150,
        TotalRaised = 240,
        TotalSeeders = 7,
        FundingProgressPercent = 50,
    };

    bool founder = false;
    bool invested = false;
    bool findInProgress = false;

    private List<string> NostrClients = new ();

    protected override async Task OnInitializedAsync()
    {
        NostrClients = _NetworkConfiguration.GetDefaultRelayUrls().Select(_ => _.Url.ToString()).ToList();

        var findProject = storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectIdentifier == ProjectId);

        if (findProject != null)
        {
            project = findProject;

                var investedProject = storage.GetSignatures().FirstOrDefault(s => s.ProjectIdentifier == ProjectId);
                if (investedProject != null)
                {
                    invested = investedProject.Signatures.Any(); // TODO need to scan for the invested projects when opening on a new browsers
                    myProjectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{investedProject.TransactionId}";   

                    storage.GetInvestmentProjectsMetadata().TryGetValue(project.NostrPubKey, out projectMetadata);
                }
        }
            else
            {
                findProject = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId)?.ProjectInfo;

            if (findProject != null)
            {
                founder = true;
                invested = true;
                project = findProject;
            }
            else
            {
                findProject = SessionStorage.GetProjectById(ProjectId);

                if (findProject != null)
                {
                    project = findProject;
                }
                else
                {
                    findInProgress = true;

                    var projectIndexerData = await _IndexerService.GetProjectByIdAsync(ProjectId);

                    if (projectIndexerData != null)
                    {
                        _RelayService.RequestProjectCreateEventsByPubKey(e =>
                        {
                            switch (e)
                            {
                                case { Kind: NostrKind.Metadata }:
                                    var nostrMetadata = JsonSerializer.Deserialize<ProjectMetadata>(e.Content, Angor.Shared.Services.RelayService.settings);
                                    projectMetadata = nostrMetadata;
                                    if (!SessionStorage.IsProjectMetadataStorageByPubkey(e.Pubkey))
                                        SessionStorage.StoreProjectMetadata(e.Pubkey, nostrMetadata);
                                    break;
                                case { Kind: NostrKind.ApplicationSpecificData }:
                                    var projectInfo = JsonSerializer.Deserialize<ProjectInfo>(e.Content, Angor.Shared.Services.RelayService.settings);
                                    project = projectInfo;
                                    if (!SessionStorage.IsProjectInStorageById(projectInfo.ProjectIdentifier))
                                        SessionStorage.StoreProjectInfo(projectInfo);
                                    findInProgress = false;
                                    break;
                            }
                        }, () =>
                        {
                            findInProgress = false;
                            StateHasChanged();
                        }, 
                            new[] { projectIndexerData.NostrPubKey });
                    }
                }
            }
        }

        if (project != null)
        {
            projectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{project.CreationTransactionId}";
        }
    }

    private async Task RefreshBalance()
    {
        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            await Task.Delay(1000);

            return new OperationResult { Success = true };
        });
    }
    private async Task RecoverFunds()
    {
        NavigationManager.NavigateTo($"/recover/{ProjectId}");
    }

    private async Task InvestInProject()
    {
        if (hasWallet)
            NavigationManager.NavigateTo($"/invest/{ProjectId}");
        else
            notificationComponent.ShowNotificationMessage("You must create a wallet if you want to invest");
    }
    
    
    private async Task CopyWordsToClipboardAsync()
    {
        var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(_walletStorage.GetWallet(), project.ProjectIndex);
        var nsec = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());
        await _clipboardService.WriteTextAsync(nsec);
        StateHasChanged();
    }
}